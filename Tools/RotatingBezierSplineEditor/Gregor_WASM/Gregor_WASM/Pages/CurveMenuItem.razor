@using Gregor_WASM.Services
@using RotatingBezierSplineEditor
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using System.Drawing
@inherits BezierBoardItemMenuItem
<MudGrid @onmouseenter="@CurveMenuItem_MouseEnter" @onmouseleave="@CurveMenuItem_MouseLeave">
    @* Preview *@
    <MudItem md="3" @onmouseenter="@prevP_MouseEnter" @onmouseleave="@prevP_MouseLeave">
        <img style="height: 100%; aspect-ratio: 1/1; " src="@prevPSource" />
    </MudItem>
    @* Name and flags*@
    <MudItem md=8> 
        <MudItem md="12">
            <MudInputString Value="@SplineLabel_Text" ValueChanged="@textBox1_TextChanged"></MudInputString>
        </MudItem>
        @* SplineEnabled*@
        <MudItem md="3">
            <ToolControlView @ref="@SplineEnabled" OnActivated="@activeTC_OnActivated"></ToolControlView>
        </MudItem>
        @* SplineVisible *@
        <MudItem md="3">
            <ToolControlView @ref="@SplineVisible" OnActivated="@visibleTC_OnActivated"></ToolControlView>
        </MudItem>
        @* appearnceP*@
        <MudItem md="3">
            <MudIconButton Disabled="@appearanceP_Disabled" Icon="@Icons.Material.Filled.AutoFixHigh" OnClick="appearnceP_MouseClick"></MudIconButton>
        </MudItem>
        @* delP *@
        <MudItem md="3">
            <img @onclick="@delP_MouseClick" />
        </MudItem>
    </MudItem>
    @* Up Down*@
    <MudItem md="1">
        <MudItem md=12>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" OnClick="@button1_Click"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" OnClick="@button2_Click"></MudIconButton>
        </MudItem>
    </MudItem>
</MudGrid>
@code {

    // These params are here only to emulate the Forms contrstructor in @foreach
    public SKImage VisibleIcon { get; set; }
    public SKImage ActiveIcon { get; set; }
    public SKImage VisibleIconDull { get; set; }
    public SKImage ActiveIconDull { get; set; }
    public int Size { get; set; }

    public new CurveMenuItem Base { get { return (CurveMenuItem)base.Base; } }
    public ToolControlView SplineVisible { get; set; } 
    public ToolControlView SplineEnabled { get; set; }
    string prevPSource = "";
    string SplineLabel_Text { get; set; } = "";
    public new RotatingBezierSpline Item { get { return (RotatingBezierSpline)base.Item; } set => base.Base.Item = value; }
    public event EventHandler OnRequestToHiglight;
    public event EventHandler OnRequestToUndoHighlight;
    bool appearanceP_Disabled = true;
    bool appearnceP_Enabled { get => !appearanceP_Disabled; set => appearanceP_Disabled = !value; }

    public void Init(BezierBoardItem item = null, bool readOnly = false)
    {
        base.Init(item);
        var st = DateTime.Now;
        //InitializeComponent();
        if (item is RotatingBezierSpline)
        {
            SplineLabel_Text = ((RotatingBezierSpline)item).Label;
        }
        if (readOnly)
        {
            appearnceP_Enabled = false;
            SplineEnabled.Enabled = false;
        }
        var s1 = DateTime.Now - st;
        try
        {
            //delTC.SetImage(Image.FromFile("Resources\\delete.png"), 23);
            //appearanceTC.SetImage(Image.FromFile("Resources\\appearance.png"), 23);
        }
        catch { }
        var s2 = DateTime.Now - st;
    }

    public void Init(RotatingBezierSpline spline, SKImage visibleIcon, SKImage activeIcon, SKImage visibleIconDull, SKImage activeIconDull, int sz)
    {
        base.Init(spline);
        SplineVisible.SetImage(visibleIcon, sz, visibleIconDull);
        SplineEnabled.SetImage(activeIcon, sz, activeIconDull);
        this.SplineLabel_Text = spline.Label;
        spline.OnAnchorAdded += Spline_OnAnchorAdded;
        spline.WidthChangeRequest += Spline_WidthChangeRequest;

        Spline_OnAnchorAdded(spline, new EventArgs());
    }

    protected override async Task OnInitializedAsync()
    {
        var st = DateTime.Now;
        var item = Base.Item;
        var readOnly = Base.ReadOnly;
        if (item is RotatingBezierSpline)
        {
            SplineLabel_Text = ((RotatingBezierSpline)item).Label;
        }
        if (readOnly)
        {
            appearnceP_Enabled = false;
            SplineEnabled.Enabled = false;
        }
        var s1 = DateTime.Now - st;
        try
        {
            //delTC.SetImage(Image.FromFile("Resources\\delete.png"), 23);
            //appearanceTC.SetImage(Image.FromFile("Resources\\appearance.png"), 23);
        }
        catch { }
        var s2 = DateTime.Now - st;

        var spline = ((RotatingBezierSpline)Base.Item);
        SplineVisible.SetImage(Base.VisibleIcon, Base.Size, Base.VisibleIconDull);
        SplineEnabled.SetImage(Base.ActiveIcon, Base.Size, Base.ActiveIconDull);
        this.SplineLabel_Text = spline.Label;
        spline.OnAnchorAdded += Spline_OnAnchorAdded;
        spline.WidthChangeRequest += Spline_WidthChangeRequest;

        Spline_OnAnchorAdded(spline, new EventArgs());
    }

    private void Spline_WidthChangeRequest(object sender, EventArgs e)
    {
        NeedsToRedrawPreview = true;
    }

    public bool NeedsToRedrawPreview { get; set; } = false;
    public int Index { get; internal set; }

    private void Spline_OnAnchorAdded(object sender, EventArgs e)
    {
        NeedsToRedrawPreview = true;
        foreach (var a in Item.Anchors)
        {
            a.OnShapeChanged -= A_OnShapeChanged;
            a.OnShapeChanged += A_OnShapeChanged;
        }
    }

    private void A_OnShapeChanged(object sender, EventArgs e)
    {
        NeedsToRedrawPreview = true;
    }

    public void RecomputePreview()
    {
        if (Item.BoundingRectangle().Width == 0) return;
        if (Item.BoundingRectangle().Height == 0) return;
        try
        {
            var bmp = new SKBitmap((int)Item.BoundingRectangle().Width, (int)Item.BoundingRectangle().Height);
            var g = Graphics.FromCanvas(new SKCanvas(bmp));
            g.ScaleTransform(1, -1);
            g.TranslateTransform(0, -bmp.Height);
            g.TranslateTransform(-Item.BoundingRectangle().X, -Item.BoundingRectangle().Y);
            float widBkp = Item.FlatTipWidth;
            if (Item.FlatTipWidth < 2)
                Item.FlatTipWidth = 2;
            Item.Draw(g, new PointF(), 1, InkDrawMode.Ink, AnchorDrawMode.None, null, null);
            Item.FlatTipWidth = widBkp;
            prevPSource = ImageServices.SKImageToString(bmp);
        }
        catch { }
    }

    private void visibleTC_OnActivated()
    {
        Item.Visible = SplineVisible.Active;
    }

    private void activeTC_OnActivated()
    {
        Item.Locked = !SplineEnabled.Active;
    }

    private void appearnceP_MouseClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.ChangeAppearance();
    }

    private void delP_MouseClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.SelfRemoveRequest();
    }

    private void prevP_MouseEnter(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.MouseState = MouseState.Hover;
        Item.Board?.Invalidate();
        OnRequestToHiglight?.Invoke(this, new EventArgs());
    }

    private void CurveMenuItem_MouseEnter(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.MouseState = MouseState.Hover;
        Item.Board?.Invalidate();

    }

    private void prevP_MouseLeave(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.MouseState = MouseState.None;
        Item.Board?.Invalidate();
        OnRequestToUndoHighlight?.Invoke(this, new EventArgs());

    }

    private void CurveMenuItem_MouseLeave(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.MouseState = MouseState.None;
        Item.Board?.Invalidate();

    }

    private void prevP_MouseClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {

    }

    private void showAllToolStripMenuItem_Click(object sender, EventArgs e)
    {
        NotifyRequestToShowAll();
    }

    private void unlockAllToolStripMenuItem_Click(object sender, EventArgs e)
    {
        NotifyRequestToUnlockAll();
    }

    private void showOnlyToolStripMenuItem_Click(object sender, EventArgs e)
    {
        NotifyRequestShowOnly();
    }

    private void lockAllButThisToolStripMenuItem_Click(object sender, EventArgs e)
    {
        NotifyRequestToUnlockOnly();
    }

    private void textBox1_TextChanged()
    {
        Item.Label = SplineLabel_Text;
    }

    private void button1_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        NotifyMoveUpRequest();
    }

    private void button2_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        NotifyMoveDownRequest();
    }
}
