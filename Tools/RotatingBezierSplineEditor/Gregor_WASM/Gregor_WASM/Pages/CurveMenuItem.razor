@using Gregor_WASM.Services
@using MudBlazor.Utilities
@using RotatingBezierSplineEditor
@using SkiaSharp
@using SkiaSharp.Views.Blazor

@inherits BezierBoardItemMenuItem
<MudGrid @onmouseenter="@CurveMenuItem_MouseEnter" @onmouseleave="@CurveMenuItem_MouseLeave" Class="px-0 py-0">
    @* Preview *@
    <MudItem md="3" @onmouseenter="@prevP_MouseEnter" @onmouseleave="@prevP_MouseLeave">
        <img style="height: 100%; width: 100%; object-fit: contain;" src="@prevPSource" />
    </MudItem>
    @* Name and flags*@
    <MudItem md=7> 
        <MudGrid Class="px-0 py-0">
            <MudItem md="12" Class="px-0 py-0">
                <MudInputString Value="@SplineLabel_Text" ValueChanged="@textBox1_TextChanged"></MudInputString>
            </MudItem>
            @* SplineEnabled*@
            <MudItem md="3">
                <MudIconButton Icon="@(SplineEnabled?Icons.Material.Filled.Mouse:Icons.Material.Outlined.Mouse)"
                    OnClick="@activeTC_OnActivated">
                </MudIconButton>
            </MudItem>
		    @* SplineVisible *@
		    <MudItem md="3">
                <MudIconButton Icon="@(SplineVisible?Icons.Material.Filled.RemoveRedEye:Icons.Material.Outlined.RemoveRedEye)"
                               OnClick="@visibleTC_OnActivated">
			    </MudIconButton>
		    </MudItem>
            @* appearnceP*@
            <MudItem md="3">
                <MudIconButton Disabled="@appearanceP_Disabled" Icon="@Icons.Material.Filled.AutoFixHigh" OnClick="appearnceP_MouseClick"></MudIconButton>
			</MudItem>
			@* delP *@
			<MudItem md="3">
				<MudIconButton Icon="@Icons.Material.Outlined.DeleteForever"
							   OnClick="@delP_MouseClick">
				</MudIconButton>
			</MudItem>
			@* appearnceP*@
			<MudItem md="3">
                <MudColorPicker Value="strokeColor" ValueChanged="strokeColorChanged" PickerVariant="PickerVariant.Dialog" />
			</MudItem>
			<MudItem md="9">
                <MudSlider T="float" Value="@strokeWidth" ValueChanged="strokeWidthChanged">Pen Width</MudSlider>
			</MudItem>
        </MudGrid>
    </MudItem>
    @* Up Down*@
    <MudItem md="2">
        <MudGrid Class="px-0 py-0">
            <MudItem md=12>
                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" OnClick="@button1_Click"></MudIconButton>
            </MudItem>
            <MudItem md=12>
                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" OnClick="@button2_Click"></MudIconButton>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>
@code {
    float strokeWidth = 0;
    MudColor strokeColor;
    public new CurveMenuItem Base { get { return (CurveMenuItem)base.Base; } }
    public new CurveMenuItem Created { get { return (CurveMenuItem)base.Created; } }
    public bool SplineEnabled { get; set; } = true;
    public bool SplineVisible { get; set; } = true; 
    string prevPSource = "";
    string SplineLabel_Text { get; set; } = "";
    public new RotatingBezierSpline Item { get { return (RotatingBezierSpline)base.Item; } set => base.Item = value; }
    public event EventHandler OnRequestToHiglight;
    public event EventHandler OnRequestToUndoHighlight;
    bool appearanceP_Disabled = false;
    bool appearnceP_Enabled { get => !appearanceP_Disabled; set => appearanceP_Disabled = !value; }

    public void Init(BezierBoardItem item = null, bool readOnly = false)
    {
        base.Init(item);
        var st = DateTime.Now;
        if (item is RotatingBezierSpline)
        {
            SplineLabel_Text = ((RotatingBezierSpline)item).Label;
            strokeColor = new MudColor(Item.NormalColor.R, Item.NormalColor.G, Item.NormalColor.B, Item.NormalColor.A);
            strokeWidth = Item.FlatTipWidth;
        }
        if (readOnly)
        {
            appearnceP_Enabled = false;
            SplineEnabled = false;
        }
    }

    public void Init(RotatingBezierSpline spline, SKImage visibleIcon, SKImage activeIcon, SKImage visibleIconDull, SKImage activeIconDull)
    {
        base.Init(spline);
        this.SplineLabel_Text = spline.Label;
        spline.OnAnchorAdded += Spline_OnAnchorAdded;
        spline.WidthChangeRequest += Spline_WidthChangeRequest;

        Spline_OnAnchorAdded(spline, new EventArgs());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var st = DateTime.Now;
            var item = Base.Item;
            var readOnly = Base.ReadOnly;
            Init(item);
            if (item is RotatingBezierSpline)
            {
                SplineLabel_Text = ((RotatingBezierSpline)item).Label;

            }
            if (readOnly)
            {
                appearnceP_Enabled = false;
                SplineEnabled = false;
            }
            var s1 = DateTime.Now - st;
            try
            {
                //delTC.SetImage(Image.FromFile("Resources\\delete.png"), 23);
                //appearanceTC.SetImage(Image.FromFile("Resources\\appearance.png"), 23);
            }
            catch { }
            var s2 = DateTime.Now - st;

            var spline = ((RotatingBezierSpline)Base.Item);
            this.SplineLabel_Text = spline.Label;
            spline.OnAnchorAdded += Spline_OnAnchorAdded;
            spline.WidthChangeRequest += Spline_WidthChangeRequest;

            Spline_OnAnchorAdded(spline, new EventArgs());
            StateHasChanged();
        }
    }

    private void Spline_WidthChangeRequest(object sender, EventArgs e)
    {
        NeedsToRedrawPreview = true;
    }

    public bool NeedsToRedrawPreview { get; set; } = false;
    public int Index { get; internal set; }

    private void Spline_OnAnchorAdded(object sender, EventArgs e)
    {
        NeedsToRedrawPreview = true; 
        foreach (var a in Item.Anchors)
        {
            a.OnShapeChanged -= A_OnShapeChanged;
            a.OnShapeChanged += A_OnShapeChanged;
        }
    }

    private void A_OnShapeChanged(object sender, EventArgs e)
    {
        NeedsToRedrawPreview = true;
    }

    public void RecomputePreview()
    {
        if (Item.BoundingRectangle().Width == 0) return;
        if (Item.BoundingRectangle().Height == 0) return;
        try
        {
            var bmp = new SKBitmap((int)Item.BoundingRectangle().Width, (int)Item.BoundingRectangle().Height);
            var g = Graphics.FromCanvas(new SKCanvas(bmp));
            g.ScaleTransform(1, -1);
            g.TranslateTransform(0, -bmp.Height);
            g.TranslateTransform(-Item.BoundingRectangle().X, -Item.BoundingRectangle().Y);
            float widBkp = Item.FlatTipWidth;
            if (Item.FlatTipWidth < 2)
                Item.FlatTipWidth = 2;
            Item.Draw(g, new System.Drawing.PointF(), 1, InkDrawMode.Ink, AnchorDrawMode.None, null, null);
            Item.FlatTipWidth = widBkp;
            prevPSource = ImageServices.SKImageToString(bmp);
            StateHasChanged();
        }
        catch { }
    }

    private void visibleTC_OnActivated()
    {
        SplineVisible = !SplineVisible;
        Item.Visible = SplineVisible;
        StateHasChanged();
    }

    private void activeTC_OnActivated()
    {
        SplineEnabled = !SplineEnabled;
        Item.Locked = !SplineEnabled;
        StateHasChanged();
    }

    private void appearnceP_MouseClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        StateHasChanged();
    }

    private void delP_MouseClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.SelfRemoveRequest();
    }

    private void prevP_MouseEnter(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.MouseState = MouseState.Hover;
        Item.Board?.Invalidate();
        OnRequestToHiglight?.Invoke(this, new EventArgs());
    }

    private void CurveMenuItem_MouseEnter(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.MouseState = MouseState.Hover;
        Item.Board?.Invalidate();

    }

    private void prevP_MouseLeave(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.MouseState = MouseState.None;
        Item.Board?.Invalidate();
        OnRequestToUndoHighlight?.Invoke(this, new EventArgs());

    }

    private void CurveMenuItem_MouseLeave(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        Item.MouseState = MouseState.None;
        Item.Board?.Invalidate();

    }

    private void prevP_MouseClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {

    }

    private void showAllToolStripMenuItem_Click(object sender, EventArgs e)
    {
        NotifyRequestToShowAll();
    }

    private void unlockAllToolStripMenuItem_Click(object sender, EventArgs e)
    {
        NotifyRequestToUnlockAll();
    }

    private void showOnlyToolStripMenuItem_Click(object sender, EventArgs e)
    {
        NotifyRequestShowOnly();
    }

    private void lockAllButThisToolStripMenuItem_Click(object sender, EventArgs e)
    {
        NotifyRequestToUnlockOnly();
    }

    private void textBox1_TextChanged(string value)
    {
        SplineLabel_Text = value;
        Item.Label = SplineLabel_Text;
    }

    private void button1_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        NotifyMoveUpRequest();
    }

    private void button2_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        NotifyMoveDownRequest();
    }
    public void SetSplineVisible(bool value)
    {
        SplineVisible = value;
        StateHasChanged();
    }
    public void SetSplineEnabled(bool value)
    {
        SplineEnabled = value;
        StateHasChanged();
    }
    void strokeWidthChanged(float width)
    {
        Item.FlatTipWidth = width;
        strokeWidth = width;
        Item.NotifyAppearanceChanged();
        StateHasChanged();
    }
    void strokeColorChanged(MudColor col)
    {
        strokeColor = col;
        Item.NormalColor = System.Drawing.Color.FromArgb(col.A, col.R, col.G, col.B);
        Item.NotifyAppearanceChanged();
        StateHasChanged();
    }
}
