@page "/"
@using Gregor_WASM.Services
@using RotatingBezierSplineEditor
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using MudBlazor.Utilities

@inject IDialogService DialogService

<PageTitle>Home</PageTitle>

<MudGrid Style="height: 100vh;">
    <MudItem md="1" Class="px-0 py-0">
        <MudItem md="12">
            <ToolControlView Width="100%" Height="70px" @ref="centerP" OnActivated="centerP_OnActivated"></ToolControlView>
            <ToolControlView Width="100%" Height="70px" @ref="curvatureHandlesP" OnActivated="curvatureHandlesP_OnActivated"></ToolControlView>
            <ToolControlView Width="100%" Height="70px" @ref="rotationHandleP" OnActivated="rotationHandleP_OnActivated"></ToolControlView>
            <MudSpacer/>
            <ToolControlView Width="100%" Height="70px" @ref="bothSplinesP" OnActivated="bothSplinesP_OnActivated"></ToolControlView>
            <ToolControlView Width="100%" Height="70px" @ref="linearSplineOnly" OnActivated="linearSplineOnly_OnActivated"></ToolControlView>
            <ToolControlView Width="100%" Height="70px" @ref="rotatingSplineOnlyP" OnActivated="rotatingSplineOnlyP_OnActivated"></ToolControlView>
        </MudItem>
	</MudItem>
	<MudItem md="8" Class="px-0 py-0">
		<BezierBoardView @ref="bBoardView"></BezierBoardView>
	</MudItem>
    <MudItem md="3">
        <MudAppBar Color="Color.Transparent" Fixed="false" Elevation="0">
            <MudSpacer/>
            <MudIconButton Icon="@Icons.Material.Outlined.MenuOpen" Color="Color.Inherit" OnClick="() => menuOpen = true" />
        </MudAppBar>
        @foreach (var menuItem in documentLayoutFP_Controls)
        {
            @if (menuItem is CurveMenuItem)
            {
                <CurveMenuItem Base="@menuItem"></CurveMenuItem>
            }
            else
            {
                <ImageMenuItem Base="@menuItem"></ImageMenuItem>
            }
        }
    </MudItem>
</MudGrid>


@* Menu *@
<MudItem md="12">
    <MudDrawer @bind-Open="@menuOpen" Anchor="@Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
        <MudNavMenu>
            <MudText Typo="Typo.h6" Class="px-4">Gregor Web</MudText>
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Main Menu</MudText>
            <MudDivider Class="my-2" />
            <MudNavGroup Title="File" Expanded="false">
                <MudNavLink Icon="@Icons.Material.Filled.FileOpen">Open</MudNavLink>
                <MudLink>
                    <MudFileUpload T="IBrowserFile" Accept=".rbs, .xml" FilesChanged="saveAsFileSelected" MaximumFileCount="100">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Transparent"
                                       StartIcon="@Icons.Material.Filled.SaveAs">
                                Save
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudLink>
                <MudNavGroup Icon="@Icons.Material.Filled.SaveAlt" Title="Import" Expanded="true">
                    <MudNavLink Icon="@Icons.Material.Filled.ScatterPlot">Spline</MudNavLink>
                    <MudNavLink Icon="@Icons.Material.Filled.Image">Image</MudNavLink>
                </MudNavGroup>
                <MudNavLink Icon="@Icons.Material.Filled.ImportExport">Export</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Filled.ClearAll" OnClick="clearAllToolStripMenuItem_Click">Clear all</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Filled.Timer"><MudCheckBox T="bool">Auto save</MudCheckBox></MudNavLink>
            </MudNavGroup>
            <MudDivider Class="my-2" />
            <MudNavGroup Title="View" Expanded="false">
                <MudNavLink Icon="@Icons.Material.Filled.ScatterPlot" Disabled="true">Spline Display</MudNavLink>
                <MudNavLink><MudCheckBox @bind-value="@combinedModeToolStripMenuItem_Checked" T="bool" @onclick="combinedModeToolStripMenuItem_Click">Combined Mode</MudCheckBox></MudNavLink>
                <MudNavLink><MudCheckBox @bind-value="@combinedModeToolStripMenuItem_Checked" @onclick="inkOnlyToolStripMenuItem_Click" T="bool">Ink Only</MudCheckBox></MudNavLink>
                <MudNavLink><MudCheckBox @bind-Value="@splineOnlyToolStripMenuItem_Checked" T="bool">Spline Only</MudCheckBox></MudNavLink>
                <MudDivider Class="my-2" />
                <MudNavLink Disabled="true">Editor</MudNavLink>
                <MudNavLink><MudCheckBox @bind-value="@gridToolStripMenuItem_Checked" @onclick="gridToolStripMenuItem_Click" T="bool">Grid</MudCheckBox></MudNavLink>
                <MudNavLink><MudCheckBox @bind-value="@scaleToolStripMenuItem_Checked" @onclick="scaleToolStripMenuItem_Click" T="bool">Scale</MudCheckBox></MudNavLink>
                <MudNavLink><MudCheckBox @bind-value="@xYAxisToolStripMenuItem_Checked" @onclick="xYAxisToolStripMenuItem_Click" Disabled="@xYAxisToolStripMenuItem_Disabled" T="bool">X-Y Axiz</MudCheckBox></MudNavLink>
                <MudDivider Class="my-2" />
                <MudNavLink Disabled="true">Worksapce</MudNavLink>
                <MudNavLink><MudCheckBox @bind-value="@backgroundImagesToolStripMenuItem" @onclick="backgroundImagesToolStripMenuItem_Click" T="bool">Background Images</MudCheckBox></MudNavLink>
                <MudNavLink><MudCheckBox @onclick="addAnchorWithLeftClickToolStripMenuItem_Click" @bind-Value="addAnchorWithLeftClickToolStripMenuItem_Checked" T="bool">Add Acnchor With Left Click</MudCheckBox></MudNavLink>
                <MudDivider Class="my-2" />
                <MudNavLink><MudSlider ValueChanged="seeThroughValueChanged" Min="0" Max="100" T="int">See Through</MudSlider></MudNavLink>
                <MudNavLink><MudCheckBox T="bool">Document Index</MudCheckBox></MudNavLink>
                <MudNavGroup Icon="@Icons.Material.Filled.SaveAlt" Title="Flat Tip Render Mode" Expanded="false">
                    <MudNavLink><MudCheckBox @bind-value="@polygonToolStripMenuItem_Checked" @onclick="polygonToolStripMenuItem_Click" T="bool">Polygons</MudCheckBox></MudNavLink>
                    <MudNavLink><MudCheckBox @bind-value="@rectanglesToolStripMenuItem_Checked" @onclick="rectanglesToolStripMenuItem_Click" T="bool">Rectangles</MudCheckBox></MudNavLink>
                </MudNavGroup>
            </MudNavGroup>
            <MudDivider Class="my-2" />
            <MudNavGroup Title="Edit" Expanded="false">
                <MudNavLink Icon="@Icons.Material.Filled.ScatterPlot" Disabled="true">Handles</MudNavLink>
                <MudNavLink><MudCheckBox @bind-value="@centerPointsToolStripMenuItem_Checked" @onclick="centerPointsToolStripMenuItem_Click" T="bool">Center Points</MudCheckBox></MudNavLink>
                <MudNavLink><MudCheckBox @bind-value="@curvatureHandlesToolStripMenuItem_Checked" @onclick="curvatureHandlesToolStripMenuItem_Click" T="bool">Curvature Handles</MudCheckBox></MudNavLink>
                <MudNavLink><MudCheckBox @bind-value="@rotationHandlesToolStripMenuItem_Checked" @onclick="rotationHandlesToolStripMenuItem_Click" T="bool">Rotation Handles</MudCheckBox></MudNavLink>
                <MudDivider Class="my-2" />
                <MudNavLink Disabled="true">Preferences</MudNavLink>
                <MudNavLink><MudCheckBox @bind-Value="addAnchorWithLeftClickToolStripMenuItem_Checked" @onclick="addAnchorWithLeftClickToolStripMenuItem_Click" T="bool">Add Anchor with left click</MudCheckBox></MudNavLink>
                <MudNavLink><MudCheckBox @bind-Value="@splinesCanBeDraggedToolStripMenuItem_Checked" @onclick="splinesCanBeDraggedToolStripMenuItem_Click" T="bool">Splines can be dragged</MudCheckBox></MudNavLink>
            </MudNavGroup>
            <MudDivider Class="my-2" />
            <MudNavGroup Title="Tools" Expanded="false">
                <MudNavLink Disabled="true">Analyze Trace Accuracy</MudNavLink>
                <MudNavLink Disabled="true">Reset Rotation Handles</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="Help" Expanded="false">
                <MudNavLink Disabled="true">How To</MudNavLink>
                <MudNavLink OnClick="aboutToolStripMenuItem1_Click">About</MudNavLink>
            </MudNavGroup>
        </MudNavMenu>
    </MudDrawer>
</MudItem>

@* About Dialog *@

<MudDialog Visible="@aboutDialogOpen" Options="new (){FullWidth = true}">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />About Gregor
        </MudText>
    </TitleContent>
    <DialogContent>
        <h3>Gregor v2.0</h3>
        <p>
            Gregor is a minimalist editor and machine data generator for rotating beizier splines.
            To read more about rotating bezier splines, press F1 or view the program help page.
        </p>
        <h3>Editing</h3>
        <ol>
            <li><p>Click and drag left mouse button on empty space to add spline anchors</p></li>
            <li><p>Right click right mouse button to start a new spline</p></li>
            <li><p>Drag with left mouse the anchors to modify a spline</p></li>
            <li><p>Click a spline to change Pen Width</p></li>
            <li><p>Drag and move objects with left mouse button</p></li>
        </ol>
        <h3>Viewing</h3>
        <ol>
            <li><p>Use Ctrl + V to switch to pan mode.</p></li>
            <li><p>Drag with Left mouse button to pan</p></li>
			<li><p>Drag with Right mouse button to zoom</p></li>
        </ol>
        <h3>File Handling</h3>
        <p>You can save, open and import rotating bezier splines using the File menu</p>


    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => aboutDialogOpen = false" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    bool menuOpen = false;
    bool aboutDialogOpen = false;
    bool backgroundImagesToolStripMenuItem;
    SKImage visibleIconDull, activeIconDull;
    SKImage visibleIcon, activeIcon;
    bool splineOnlyToolStripMenuItem_Checked;
    bool combinedModeToolStripMenuItem_Checked = true;
    bool inkOnlyToolStripMenuItem_Checked;
    bool centerPointsToolStripMenuItem_Checked = true;
    bool curvatureHandlesToolStripMenuItem_Checked = true;
    bool rotationHandlesToolStripMenuItem_Checked;
    bool polygonToolStripMenuItem_Checked = false;
    bool rectanglesToolStripMenuItem_Checked = true;
    bool splinesCanBeDraggedToolStripMenuItem_Checked = true;

    bool xYAxisToolStripMenuItem_Enabled = true;
    bool xYAxisToolStripMenuItem_Disabled { get => !xYAxisToolStripMenuItem_Enabled; set => xYAxisToolStripMenuItem_Enabled = !value; }
    bool xYAxisToolStripMenuItem_Checked = true;
    bool gridToolStripMenuItem_Checked = true;
    bool scaleToolStripMenuItem_Checked = true;
    bool addAnchorWithLeftClickToolStripMenuItem_Checked = true;
    private ToolControlView centerP;
    private ToolControlView curvatureHandlesP;
    private ToolControlView rotationHandleP;
    private ToolControlView bothSplinesP;
    private ToolControlView linearSplineOnly;
    private ToolControlView rotatingSplineOnlyP;
    BezierBoardView bBoardView;
    BezierBoard bezierBoard1 { get => bBoardView.bBoard; }
    List<BezierBoardItemMenuItem> documentLayoutFP_Controls = new List<BezierBoardItemMenuItem>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var tc = new ToolControlView();
            visibleIcon = SKImage.FromEncodedData(FileManager.GetBytes("Resources\\visible.png"));
            activeIcon = SKImage.FromEncodedData(FileManager.GetBytes("Resources\\active.png"));
            visibleIconDull = tc.SetImage(visibleIcon);
            activeIconDull = tc.SetImage(activeIcon);
            // set images
            centerP.SetImage(SKImage.FromEncodedData(FileManager.GetBytes("Resources\\Center.png")));
            curvatureHandlesP.SetImage(SKImage.FromEncodedData(FileManager.GetBytes("Resources\\CurvatureHandles.png")));
            rotationHandleP.SetImage(SKImage.FromEncodedData(FileManager.GetBytes("Resources\\RotationHandles.png")));
            await centerP.SetDistinctSelection(false);
            await curvatureHandlesP.SetDistinctSelection(false);
            await rotationHandleP.SetDistinctSelection(false);

            // set targets
            centerP.TargetPart = AnchorDrawMode.Centers;
            curvatureHandlesP.TargetPart = AnchorDrawMode.CurvatureHandles;
            rotationHandleP.TargetPart = AnchorDrawMode.RotaionHandles;

            await curvatureHandlesP.SetActive(true);


            bothSplinesP.SetImage(SKImage.FromEncodedData(FileManager.GetBytes("Resources\\bothSplines.png")));
            rotatingSplineOnlyP.SetImage(SKImage.FromEncodedData(FileManager.GetBytes("Resources\\rotatingSplineOnly.png")));
            linearSplineOnly.SetImage(SKImage.FromEncodedData(FileManager.GetBytes("Resources\\splineOnly.png")));



            bezierBoard1.OnBezierBoardItemAdded += BezierBoard1_OnSplineAdded;
            bezierBoard1.OnBezierBoardItemRemoved += BezierBoard1_OnSplineRemoved;
            bezierBoard1.OnRequestToShowAll += async (s, e) => await Con_OnRequestToShowAll(s, e);
            bezierBoard1.OnRequestToUnlockAll += async (s, e) => await Con_OnRequestToUnlockAll(s, e);
            bezierBoard1.OnRequestShowOnly += async (s, e) => await Con_OnRequestShowOnly(s, e);
            bezierBoard1.OnRequestToUnlockOnly += async (s, e) => await Con_OnRequestToUnlockOnly(s, e);
            //// add dummy data
            //var sp = new RotatingBezierSpline();
            //sp.AddAnchor(new RotatingBezierSplineAnchor(new PointF(34.5F, -2.75F)));
            //sp.AddAnchor(new RotatingBezierSplineAnchor(new PointF(3.6F, -101)));
            //sp.AddAnchor(new RotatingBezierSplineAnchor(new PointF(110, -28)));
            //sp.AddAnchor(new RotatingBezierSplineAnchor(new PointF(24.5F, -209)));
            //sp.AddAnchor(new RotatingBezierSplineAnchor(new PointF(203, -311)));
            //sp.AddAnchor(new RotatingBezierSplineAnchor(new PointF(242, -194)));
            //sp.FlatTipWidth = 40;
            //bezierBoard1.AddItem(sp);
            //bezierBoard1.AddItem(new ImageItem(Properties.Resources.Ain_for_sample_trace, 0, 0));

            //sp = new RotatingBezierSpline();
            //var a0 = new RotatingBezierSplineAnchor(new PointF(400, 300), new PointF(350, 350), 50.0D, 0.0F);
            //var a1 = new RotatingBezierSplineAnchor(new PointF(600, 100), new PointF(450, 50), 50.0D, 0.0F);
            //var a2 = new RotatingBezierSplineAnchor(new PointF(600, 300), new PointF(400, 350), 50.0D, 0.0F);
            //sp.FlatTipWidth = 40;
            //sp.AddAnchor(a0);
            //sp.AddAnchor(a1);
            //sp.AddAnchor(a2);
            ////bezierBoard1.AddItem(sp);
        }
    }
    protected override async Task OnInitializedAsync()
    {
    }

    void setEditingModeMenuItems()
    {
        rotationHandlesToolStripMenuItem_Checked = rotationHandleP.Active;
        curvatureHandlesToolStripMenuItem_Checked = curvatureHandlesP.Active;
        centerPointsToolStripMenuItem_Checked = centerP.Active;
    }
    void centerP_OnActivated()
    {
        if (centerP.Active)
            bezierBoard1.AnchorDrawMode |= AnchorDrawMode.Centers;
        else
            bezierBoard1.AnchorDrawMode &= ~AnchorDrawMode.Centers;
        setEditingModeMenuItems();
    }
    void curvatureHandlesP_OnActivated()
    {
        if (curvatureHandlesP.Active)
            bezierBoard1.AnchorDrawMode |= AnchorDrawMode.CurvatureHandles;
        else
            bezierBoard1.AnchorDrawMode &= ~AnchorDrawMode.CurvatureHandles;
        setEditingModeMenuItems();
    }
    void rotationHandleP_OnActivated()
    {
        if (rotationHandleP.Active)
            bezierBoard1.AnchorDrawMode |= AnchorDrawMode.RotaionHandles;
        else
            bezierBoard1.AnchorDrawMode &= ~AnchorDrawMode.RotaionHandles;
        setEditingModeMenuItems();
    }
    void setDisplayStyleMenuItems()
    {
        splineOnlyToolStripMenuItem_Checked = linearSplineOnly.Active;
        combinedModeToolStripMenuItem_Checked = bothSplinesP.Active;
        inkOnlyToolStripMenuItem_Checked = rotatingSplineOnlyP.Active;
    }
    void bothSplinesP_OnActivated() 
    {
        setDisplayStyleMenuItems();
        bezierBoard1.InkDrawMode = InkDrawMode.Ink | InkDrawMode.Spline | (bezierBoard1.InkDrawMode & InkDrawMode.Images);
    }
    void rotatingSplineOnlyP_OnActivated() 
    {
        setDisplayStyleMenuItems();
        bezierBoard1.InkDrawMode = InkDrawMode.Ink | (bezierBoard1.InkDrawMode & InkDrawMode.Images);
    }
    void linearSplineOnly_OnActivated() 
    {
        setDisplayStyleMenuItems(); 
        bezierBoard1.InkDrawMode = InkDrawMode.Spline | (bezierBoard1.InkDrawMode & InkDrawMode.Images);
    }



    private void BezierBoard1_OnSplineRemoved(object sender, BezierBoard.BezierBoardItemEventArgs e)
    {
        documentLayoutFP_Controls.Remove(documentLayoutFP_Controls.OfType<BezierBoardItemMenuItem>().ToList().Find(ci => ci.Item == e.Item));
    }

    private void BezierBoard1_OnSplineAdded(object sender, BezierBoard.BezierBoardItemEventArgs e)
    {
        BezierBoardItemMenuItem con = null;
        if (e.Item is RotatingBezierSpline)
        {  
            con = new CurveMenuItem
                {
                    Item = (RotatingBezierSpline)e.Item,
                    VisibleIcon = visibleIcon,
                    ActiveIcon = activeIcon,
                    VisibleIconDull = visibleIconDull,
                    ActiveIconDull = activeIconDull,
                };
        }
        else if (e.Item is ImageItem)
            con = new ImageMenuItem
                {
                    Item = (ImageItem)e.Item,
                    VisibleIcon = visibleIcon,
                    ActiveIcon = activeIcon,
                    VisibleIconDull = visibleIconDull,
                    ActiveIconDull = activeIconDull,
                };
        con.OnRequestToShowAll += async(s,e) => await Con_OnRequestToShowAll(s, e);
        con.OnRequestToUnlockAll += async(s,e) => await Con_OnRequestToUnlockAll(s, e);
        con.OnRequestShowOnly += async(s,e) => await Con_OnRequestShowOnly(s, e);
        con.OnRequestToUnlockOnly += async(s,e) => await Con_OnRequestToUnlockOnly(s, e);

        void MoveItem(List<BezierBoardItemMenuItem> list, BezierBoardItemMenuItem item, int newIndex)
        {
            var oldIndex = list.IndexOf(item);
            if (oldIndex < 0 || oldIndex >= list.Count || newIndex < 0 || newIndex >= list.Count)
                return;

            list.RemoveAt(oldIndex);

            // If the item is moved to a position after the old index, adjust the new index
            if (newIndex > oldIndex)
                newIndex--;
            if (newIndex < 0)
                newIndex = 0;

            list.Insert(newIndex, item);
        }

        con.OnMoveDownRequest += (s, e2) =>
        {
            MoveItem(documentLayoutFP_Controls, con, documentLayoutFP_Controls.IndexOf(con) + 1);
            for (int i = 0; i < documentLayoutFP_Controls.Count; i++)
                ((BezierBoardItemMenuItem)documentLayoutFP_Controls[i]).Item.Index = i;
        };
        con.OnMoveUpRequest += (s, e2) =>
        {
            MoveItem(documentLayoutFP_Controls, con, documentLayoutFP_Controls.IndexOf(con) - 1);
            for (int i = 0; i < documentLayoutFP_Controls.Count; i++)
                ((BezierBoardItemMenuItem)documentLayoutFP_Controls[i]).Item.Index = i;
        };
        documentLayoutFP_Controls.Add(con);
        StateHasChanged();
    }

    private async Task Con_OnRequestToUnlockOnly(object sender, EventArgs e)
    {
        foreach (var cmi in documentLayoutFP_Controls.OfType<CurveMenuItem>())
        {
            if (cmi != sender && cmi.Item != sender)
                await cmi.SplineEnabled.SetActive(false);

        }
    }

    private async Task Con_OnRequestToUnlockAll(object sender, EventArgs e)
    {
        foreach (var cmi in documentLayoutFP_Controls.OfType<CurveMenuItem>())
            await cmi.SplineEnabled.SetActive(true);
    }


    private async Task Con_OnRequestShowOnly(object sender, EventArgs e)
    {
        foreach (var cmi in documentLayoutFP_Controls.OfType<CurveMenuItem>())
        {
            if (cmi != sender && cmi.Item != sender)
                await cmi.SplineVisible.SetActive(false);
        }
    }
    private async Task Con_OnRequestToShowAll(object sender, EventArgs e)
    {
        foreach (var cmi in documentLayoutFP_Controls.OfType<CurveMenuItem>())
            await cmi.SplineVisible.SetActive(true);
    }

    private void backgroundImagesToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        backgroundImagesToolStripMenuItem = !backgroundImagesToolStripMenuItem;
        if (backgroundImagesToolStripMenuItem)
            bezierBoard1.InkDrawMode |= InkDrawMode.Images;
        else
            bezierBoard1.InkDrawMode &= ~InkDrawMode.Images;
        bezierBoard1.Invalidate();
        StateHasChanged();
    }
    private async Task combinedModeToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        await bothSplinesP.SetActive(true);
    }
    private async Task inkOnlyToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        await rotatingSplineOnlyP.SetActive(true);
    }
    private async Task splineOnlyToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        await linearSplineOnly.SetActive(true);
    }


    private async Task centerPointsToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        await centerP.SetActive(!centerP.Active);
        centerPointsToolStripMenuItem_Checked = centerP.Active;
    }

    private async Task curvatureHandlesToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        await curvatureHandlesP.SetActive(!curvatureHandlesP.Active);
        curvatureHandlesToolStripMenuItem_Checked = curvatureHandlesP.Active;
    }

    private async Task rotationHandlesToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        await rotationHandleP.SetActive(!rotationHandleP.Active);
        rotationHandlesToolStripMenuItem_Checked = rotationHandleP.Active;
    }

    private void gridToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        bezierBoard1.GridEnabled = !bezierBoard1.GridEnabled;
        gridToolStripMenuItem_Checked = bezierBoard1.GridEnabled;
        // also disable the axis selection. There is no point having it if the whole grid is disabled.
        xYAxisToolStripMenuItem_Enabled = gridToolStripMenuItem_Checked;
        xYAxisToolStripMenuItem_Checked = bezierBoard1.XYLinesEnabled;
    }

    private void scaleToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        bezierBoard1.ScaleEnabled = !bezierBoard1.ScaleEnabled;
        scaleToolStripMenuItem_Checked = bezierBoard1.ScaleEnabled;
    }

    private void xYAxisToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        bezierBoard1.XYLinesEnabled = !bezierBoard1.XYLinesEnabled;
        xYAxisToolStripMenuItem_Checked = bezierBoard1.XYLinesEnabled;
    }

    private void aboutToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        //Process.Start("explorer", "https://github.com/umartechboy/Thesis_2017-MS-MC-17");
    }

    private void aboutToolStripMenuItem1_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        aboutDialogOpen = true;
    }

    private void saveAsFileSelected(IBrowserFile file)
    {
        var sfd_Filter = "Rotating Bezier Spline Files (*.rbs)|*.rbs|XML documents (*.xml)|*.xml";
        // if (File.Exists(sfd.FileName))
        //     bezierBoard1.SaveObjects(sfd.FileName);
        // else if (sfd.ShowDialog() == DialogResult.OK)
        //     bezierBoard1.SaveObjects(sfd.FileName);
    }

    public string FileToLoad { get; internal set; }

    private void openToolStripMenuItem_Click(object sender, EventArgs e)
    {
        // if (ofd.ShowDialog() == DialogResult.OK)
        // {
        //     sfd.FileName = ofd.FileName;
        //     Text = "Gregor -- " + Path.GetFileNameWithoutExtension(sfd.FileName);
        //     documentLayoutFP.Controls.Clear();
        //     bezierBoard1.ClearObjects();
        //     bezierBoard1.ImportObjects(ofd.FileName);
        // }
    }

    private void importToolStripMenuItem_Click(object sender, EventArgs e)
    {

    }

    private void splinesToolStripMenuItem_Click(object sender, EventArgs e)
    {
        // ofd.Filter = "Rotating Bezier Spline Files (*.rbs)|*.rbs|XML documents (*.xml)|*.xml";
        // if (ofd.ShowDialog() == DialogResult.OK)
        // {
        //     //documentLayoutFP.Controls.Clear();
        //     //bezierBoard1.ClearObjects();
        //     bezierBoard1.ImportObjects(ofd.FileName);
        // }
    }

    private void imageToolStripMenuItem_Click(object sender, EventArgs e)
    {
        // ofd.Filter = "Image files (*.jpg, *.bmp, *.png)|*.png;*.jpg;*.bmp|All files (*.*)|*.*";
        // if (ofd.ShowDialog() == DialogResult.OK)
        // {
        //     var item = bezierBoard1.AddItem(ImageItem.FromFile(bezierBoard1, ofd.FileName));
        //     bezierBoard1.ForceBeginDragItem(item);
        // }
    }
    private void fromCipboardToolStripMenuItem_Click(object sender, EventArgs e)
    {
        var item = bezierBoard1.AddItem(ImageItem.FromClipBoard(bezierBoard1));
        bezierBoard1.ForceBeginDragItem(item);
    }

    private void addAnchorWithLeftClickToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        bezierBoard1.clickIsForAdding = addAnchorWithLeftClickToolStripMenuItem_Checked = !addAnchorWithLeftClickToolStripMenuItem_Checked;
        // addAnchorWithLeftClickToolStripMenuItem1_Checked = addAnchorWithLeftClickToolStripMenuItem_Checked;
        bezierBoard1.DefaultCursor = addAnchorWithLeftClickToolStripMenuItem_Checked ? Cursors.Default : Cursors.SizeAll;
        bezierBoard1.Cursor = bezierBoard1.DefaultCursor;
    }

    private void clearAllToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        documentLayoutFP_Controls.Clear();
        bezierBoard1.ClearObjects();
        StateHasChanged();
    }

    // public static RotatingBezierSpline[] Import()
    // {
    //     var form = new MainForm();
    //     form.StartPosition = FormStartPosition.CenterParent;
    //     form.ShowDialog();
    //     return form.bezierBoard1.GetSplineObjects();
    // }

    private void seeThroughValueChanged(int value)
    {
        BezierBoard.Fill = value / 100.0F;
        bezierBoard1.Invalidate();
    }

    private void previewRefreshTimerT_Tick(object sender, EventArgs e)
    {
        foreach (var ci in documentLayoutFP_Controls.OfType<CurveMenuItem>())
        {
            if (ci.NeedsToRedrawPreview)
            {
                ci.RecomputePreview();
                ci.NeedsToRedrawPreview = false;
            }
        }
    }

    private void autoSaveToolStripMenuItem_Click(object sender, EventArgs e)
    {
        //autoSaverT.Enabled = autoSaveToolStripMenuItem.Checked;
    }

    // void ProcessRenderRequest(ExportRequest Request)
    // {
    //     var splines = bezierBoard1.GetSplineObjects().ToList();
    //     var images = bezierBoard1.GetImageObjects().ToList();
    //     if (splines.Count == 0)
    //         return;
    //     var minX = splines.Min(spline => spline.BoundingRectangle().Left);
    //     var maxX = splines.Max(spline => spline.BoundingRectangle().Right);
    //     var minY = splines.Min(spline => spline.BoundingRectangle().Top);
    //     var maxY = splines.Max(spline => spline.BoundingRectangle().Bottom);
    //     float scale = Request.DPI / 1000.0F;
    //     var rect = new RectangleF(minX, minY, maxX - minX, maxY - minY);
    //     var bmp = new Bitmap((int)(rect.Width * scale), (int)(rect.Height * scale));
    //     var g = Graphics.FromImage(bmp);
    //     g.ScaleTransform(1, -1);
    //     g.TranslateTransform(0, -bmp.Height);
    //     g.TranslateTransform(-rect.X * scale, -rect.Y * scale);
    //     g.ScaleTransform(scale, scale);
    //     var scBkp = BezierBoard.ForceSingleColorSplines;
    //     var colBkp = BezierBoard.ForcedInkColor;
    //     BezierBoard.ForcedInkColor = Request.ForceColor;
    //     BezierBoard.ForceSingleColorSplines = Request.ForceSingleColor;
    //     if (Request.RenderAllImages)
    //     {
    //         foreach (var image in images)
    //             image.Draw(g, new PointF(), 1, InkDrawMode.Images, Request.AnchorMode, null, null);
    //     }
    //     if (Request.AlternateImageToRender != null)
    //     {
    //         Request.AlternateImageToRender.Draw(g, new PointF(), 1, InkDrawMode.Images, Request.AnchorMode, null, null);
    //     }
    //     if (!Request.DontRenderSplines)
    //     {
    //         foreach (var Spline in splines)
    //         {
    //             var bkp = BezierBoard.FlatTipRenderAlgorithm;
    //             BezierBoard.FlatTipRenderAlgorithm = Request.RenderAlgorithm;
    //             float widBkp = Spline.FlatTipWidth;
    //             if (Spline.FlatTipWidth < 2)
    //                 Spline.FlatTipWidth = 2;
    //             Spline.Draw(g, new PointF(), 1, Request.DrawMode, Request.AnchorMode, null, null);
    //             Spline.FlatTipWidth = widBkp;
    //             BezierBoard.FlatTipRenderAlgorithm = bkp;
    //         }
    //     }
    //     Request.RenderOutput = bmp;
    //     BezierBoard.ForcedInkColor = colBkp;
    //     BezierBoard.ForceSingleColorSplines = scBkp;
    // }
    // private void exportToolStripMenuItem_Click(object sender, EventArgs e)
    // {
    //     var em = new ExportMenu();
    //     em.OnExportRequest += (s, e2) =>
    //     {
    //         ProcessRenderRequest(e2.Request);
    //     };
    //     em.ShowDialog();
    // }

    private void polygonToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        BezierBoard.FlatTipRenderAlgorithm = FlatTipRenderAlgorithm.Polygon;
        polygonToolStripMenuItem_Checked = true;
        rectanglesToolStripMenuItem_Checked = false;
        bezierBoard1.Invalidate();
    }

    private void rectanglesToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        BezierBoard.FlatTipRenderAlgorithm = FlatTipRenderAlgorithm.Rectangle;
        polygonToolStripMenuItem_Checked = false;
        rectanglesToolStripMenuItem_Checked = true;
        bezierBoard1.Invalidate();
    }

    // private void analyzeTraceAccuracyToolStripMenuItem_Click(object sender, EventArgs e)
    // {
    //     var taf = new TraceAnalyzer(bezierBoard1);
    //     foreach (var imgI in documentLayoutFP.Controls.OfType<ImageMenuItem>())
    //         taf.AddReferenceImage(imgI.Item);
    //     taf.OnExportRequest += (s, e2) => { ProcessRenderRequest(e2.Request); };
    //     taf.ShowDialog();
    // }

    private void splinesCanBeDraggedToolStripMenuItem_Click(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        BezierBoard.SplinesCanBeSelected = splinesCanBeDraggedToolStripMenuItem_Checked = !splinesCanBeDraggedToolStripMenuItem_Checked;
    }

    private void resetRotationHandleLengthsToolStripMenuItem_Click(object sender, EventArgs e)
    {
        foreach (var s in bezierBoard1.GetSplineObjects())
        {
            foreach (var a in s.Anchors)
                a.ResetRotationHandleLength();
        }
    }

    // private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
    // {
    //     if (bezierBoard1.MayHaveUnsavedChanges)
    //     {
    //         if (MessageBox.Show("There are unsaved chnages in the worksheet. Do you want to go back and save them first?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
    //             e.Cancel = true;
    //     }
    // }

    // private void exportAndAnalyzeTraceAccuracyToolStripMenuItem_Click(object sender, EventArgs e)
    // {
    //     var em = new ExportMenu();
    //     em.OnExportRequest += (s, e2) =>
    //     {
    //         ProcessRenderRequest(e2.Request);
    //     };
    //     em.ShowDialog();
    // }

    // private void saveAsToolStripMenuItem_Click(object sender, EventArgs e)
    // {
    //     sfd.Filter = "Rotating Bezier Spline Files (*.rbs)|*.rbs|XML documents (*.xml)|*.xml";
    //     if (sfd.ShowDialog() == DialogResult.OK)
    //     {
    //         bezierBoard1.SaveObjects(sfd.FileName);
    //     }
    // }

    private void MainForm_Load(object sender, EventArgs e)
    {
        if (File.Exists(FileToLoad))
        {

        }
    }

    // private void autoFileOpener_Tick(object sender, EventArgs e)
    // {
    //     autoFileOpener.Enabled = false;
    //     if (File.Exists(FileToLoad))
    //     {
    //         sfd.FileName = FileToLoad;
    //         ofd.FileName = FileToLoad;
    //         Text = "Gregor -- " + Path.GetFileNameWithoutExtension(sfd.FileName);
    //         documentLayoutFP.Controls.Clear();
    //         bezierBoard1.ClearObjects();
    //         bezierBoard1.ImportObjects(ofd.FileName);
    //     }
    // }

    // private void autoSaverT_Tick(object sender, EventArgs e)
    // {
    //     if (!bezierBoard1.MayHaveUnsavedChanges)
    //         return;
    //     bezierBoard1.MayHaveUnsavedChanges = false;
    //     var fNameSeed = "Untitled.rbs";
    //     if (File.Exists(sfd.FileName))
    //         fNameSeed = sfd.FileName;

    //     var fname = Path.GetFileNameWithoutExtension(fNameSeed) + " " + DateTime.Now.ToString("MM-dd hh.mm.ss");
    //     var dir = Path.Combine(Path.GetDirectoryName(fNameSeed), Path.GetFileNameWithoutExtension(fNameSeed) + "_Autosave");
    //     if (!Directory.Exists(dir))
    //         Directory.CreateDirectory(dir);
    //     fname = Path.Combine(dir, fname + Path.GetExtension(fNameSeed));
    //     bezierBoard1.SaveObjects(fname);
    // }

    // private void autoSaveDurationChange_Click(object sender, EventArgs e)
    // {
    //     var dur = int.Parse(((ToolStripMenuItem)sender).Text.Split(new char[] { ' ' })[0]);
    //     if (((ToolStripMenuItem)sender).Text.Split(new char[] { ' ' })[1].ToLower().StartsWith("m"))
    //         dur *= 60;
    //     autoSaverT.Interval = dur * 1000;
    // }
}