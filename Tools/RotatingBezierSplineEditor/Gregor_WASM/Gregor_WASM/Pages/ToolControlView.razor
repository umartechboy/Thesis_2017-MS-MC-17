@using Gregor_WASM.Services
@using RotatingBezierSplineEditor
@using SkiaSharp
@using SkiaSharp.Views.Blazor

<div style="width: @Width; height: @Height; cursor: pointer;"
     @onmousemove:stopPropagation="true"
     @onmousedown:preventDefault="true"
     @onmouseup:preventDefault="true"
     @onmouseenter:preventDefault="true"
     @onmouseleave:preventDefault="true"
     @onclick:preventDefault="true">
    <img style="width: 100%; height: 100%; object-fit: contain;"
         @onmousemove="OnMouseMove"
         @onmouseenter="OnMouseEnter"
         @onmouseleave="OnMouseLeave"
         @onclick="OnClick" 
         src="@imgSrc"/>
</div>
@code {
    [Parameter]
    public string Width { get; set; } = "100%";
    [Parameter]
    public string Height { get; set; } = "100%";

    string imgSrc = "";
    bool containsMouseCursor = false;
    bool _active = false;
    bool _dist = true;
    public async Task SetDistinctSelection(bool value) { _dist = value; await SetActive(Active); }
    public bool DistinctSelection { get => _dist; }
    [Parameter]
    public EventCallback<bool> MakeSiblingsActive { get; set; }
    [Parameter]
    public EventCallback OnActivated { get; set; }
    public bool Active { get => _active; }

    bool panelEnable = true;
    // Emulate Panel.Enable
    public bool Enabled
    {
        get { return panelEnable; }
        set
        {
            panelEnable = value;
            Invalidate();
        }
    }
    public async Task SetActive(bool value)
    {
        if (DistinctSelection)
        {
            await MakeSiblingsActive.InvokeAsync(false);
        }
        if (value != _active)
        {
            // change the value first
            _active = value;
            // raise the events
            await OnActivated.InvokeAsync();
            Invalidate();
            StateHasChanged();
        }
    }
    SKImage icon;
    SKImage dull;
    /// <summary>
    /// This is alternate to BackgroundImage creates a dull looking copy of the image as well.
    /// </summary>
    /// <param name="Image">Image to be used base icon</param>
    public SKImage SetImage(SKImage Image, SKImage dull = null)
    {
        icon = Image;
        // make new memory space for the dull image
        if (dull == null)
        {
            var bmp = SKBitmap.Decode(Image.Encode());
            // this method can be made fast by using Unsafe access. Create BitmapData using the specs of this bmp, "UnlockBits" on the bitmap using the new bitmap data. Read Scan0 of bmpData using Marshal.Copy, alter it, put back the data by locking the bits.
            for (int y = 0; y < bmp.Height; y++)
            {
                for (int x = 0; x < bmp.Width; x++)
                {
                    var c = bmp.GetPixel(x, y);
                    byte g = (byte)((c.Red + c.Green + c.Blue) / 3);
                    // get a gray level
                    bmp.SetPixel(x, y, new SKColor(g, g, g, (byte)(c.Alpha == 0 /*Do it only on non transparent pixels*/? 0 : 60)));
                }
            }
            dull = SKImage.FromBitmap(bmp);
        }
        this.dull = dull;
        Invalidate();
        return dull;
    }
    protected void Invalidate()
    {
        if (icon == null) // this is needed for the UI Editor which is not familiar with our objects and will call this function regardless of the values to show in the editor.
            return;
        imgSrc = ImageServices.SKImageToString(Active ? icon : dull);
    }
    // Emulate control UI

    SKPoint lastMove;

    public void OnMouseMove(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        lastMove = new SKPoint((float)e.OffsetX, (float)e.OffsetY);
    }
    public void OnMouseEnter(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        containsMouseCursor = true; Invalidate();
        StateHasChanged();
    }
    public void OnMouseLeave(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        containsMouseCursor = false; Invalidate();
        StateHasChanged();
    }
    public async Task OnClick(EventArgs e)
    {
        if (DistinctSelection)
            await SetActive(true);
        else await SetActive(!Active);
        Invalidate();
        StateHasChanged();
    }

    // Anchor EditToolControl only
    public AnchorDrawMode TargetPart {get;set;}
}
