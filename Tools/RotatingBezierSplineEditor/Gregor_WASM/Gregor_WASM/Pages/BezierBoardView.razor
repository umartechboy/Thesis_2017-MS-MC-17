@using SkiaSharp
@using SkiaSharp.Views.Blazor

<div style="width: @Width; height: @Height; cursor:@Cursor;"
	 @onmousemove:stopPropagation="true"
	 @onmousedown:preventDefault="true"
	 @onmouseup:preventDefault="true"
	 @onmouseenter:preventDefault="true"
	 @onmouseleave:preventDefault="true"
	 @onclick:preventDefault="true">
	<SKGLView @ref=skView
			  style="width: 100%; height: 100vh;"
			  OnPaintSurface="async (e) => await OnPaint(e)"
			  IgnorePixelScaling="true"
			  @onmousemove="OnMouseMove"
			  @onmousedown="OnMouseDown"
			  @onmouseup="OnMouseUp"
			  @onmouseenter="OnMouseEnter"
			  @onmouseleave="OnMouseLeave"
			  @onclick="OnClick"></SKGLView>
</div>
@code {
	[Parameter]
	public string Width { get; set; } = "100%";
	[Parameter]
	public string Height { get; set; } = "100%";
	protected string Cursor = "auto";
	SKGLView skView;
	public RotatingBezierSplineEditor.BezierBoard bBoard { get; private set; }
	protected override async Task OnInitializedAsync()
	{
		bBoard = new RotatingBezierSplineEditor.BezierBoard(() => skView.Invalidate());
	}
	public static Dictionary<Cursors, string> CursorsMap = new Dictionary<Cursors, string>
	{
		{ Cursors.Default, "auto" },
		{ Cursors.IBeam, "text" },
		{ Cursors.NoMoveHoriz, "grab" },
		{ Cursors.VSplit, "col-resize" },
		{ Cursors.No, "none" },
		{ Cursors.Hand, "grab" },
		{ Cursors.SizeAll, "move" },
	};
	async Task OnPaint(SKPaintGLSurfaceEventArgs e)
	{
		bBoard.Width = e.Info.Width;
		bBoard.Height = e.Info.Height;
		Cursor = CursorsMap[bBoard.Cursor];
		bBoard.BezierBoard_SizeChanged(null, null);
		e.Surface.Canvas.ResetMatrix();
		e.Surface.Canvas.Clear(SKColors.White);
		try
		{
			bBoard.OnPaint(e);
		}
		catch (Exception ex)
		{

		}
	}

	SKPoint lastMove;

	public void OnMouseMove(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
	{
		lastMove = new SKPoint((float)e.OffsetX, (float)e.OffsetY);
		bBoard.NotifyMouseMove(new Gregor_WASM.MouseEventArgs(e));
	}
	public void OnMouseDown(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
	{
		bBoard.NotifyMouseDown(new Gregor_WASM.MouseEventArgs(e));
	}
	public void OnMouseUp(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
	{
		bBoard.NotifyMouseUp(new Gregor_WASM.MouseEventArgs(e));
	}
	public void OnMouseEnter(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
	{
		bBoard.NotifyMouseEnter(new Gregor_WASM.MouseEventArgs(e));
	}
	public void OnMouseLeave(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
	{
		bBoard.NotifyMouseLeave(new Gregor_WASM.MouseEventArgs(e));
	}
	public void OnClick(EventArgs e)
	{
		bBoard.NotifyMouseClick(new Gregor_WASM.MouseEventArgs()
			{
				Location = new System.Drawing.Point((int)Math.Round(lastMove.X), (int)Math.Round(lastMove.Y)),
				Clicks = 1,
				Button = MouseButtons.Left
			});
	}
}